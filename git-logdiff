#!/bin/bash

remote=$( git rev-parse --abbrev-ref --symbolic-full-name "@{u}" \
              2>/dev/null )
push=$( git rev-parse --abbrev-ref --symbolic-full-name "@{push}" \
              2>/dev/null )

if [[ "$1" == "--help" || "$1" == "-h" || \
  $# -lt 1 && "${remote}" == "" && "${push}" == "" ]]
then
  echo Usage: $( basename $0 ) [git-log-options...] [branch...]
  echo
  echo If more than one branch is provided, show history for each branch
  echo from the common ancestor of all of them.
  echo
  echo If only one branch is provided, show history for each branch from
  echo the common ancestor of it and the current branch.
  echo
  echo "If no branches provided, and the branch has remote(s), compare"
  echo with the remotes. Includes pull and push if they differ.
  echo
  echo "git-log-options must be provided as '--option=value' or"
  echo "'-o=value' format to include a value. Otherwise 'value'"
  echo "will be detected as a branch"
  exit 1
fi

logopts=( --oneline --reverse --first-parent )
while [[ $# -ge 1 && "${1:0:1}" == "-" ]]
do
  # Assume this is a parameter to "git log"
  # Must use "--option=value" form. Otherwise "value" will be detected
  # as a branch
  logopts+=$1
  shift
done

if [[ $# -eq 0 ]]
then
  branches=( "${@}" HEAD )
  for b in "${remote}" "${push}"
  do
    if [[ "${b}" != "" ]] && \
      ! printf '%s\0' "${branches[@]}"  | grep -F -x -z -q -- "${b}"
    then
      branches+=( "${b}" )
    fi
  done
elif [[ $# -eq 1 ]]
then
  branches=( "${@}" HEAD )
else
  branches=( "${@}" )
fi
base=$( git merge-base --octopus "${branches[@]}" )
if [[ "${base}" == "" ]]
then
  echo Error: No common ancestor
  exit 1
fi
echo Common ancestor
git log --oneline -1 "${base}"
for branch in "${branches[@]}"
do
  echo -e "\n-- ${branch}"
  git --no-pager log "${logopts[@]}" "${base}..${branch}"
done
