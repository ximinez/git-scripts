#!/bin/bash

# Run this after a fresh clone to do quick setup
#
# Windows doesn't like to make symbolic links without jumping through
# hoops. Here are the hoops:
# 1) Open cmd.exe as Administrator
# 2) cd to this repo directory (examples assume it's C:\Dev\git-scripts)
# 3) for %f in (git-* gitfunctions) do mklink C:\Users\passp\bin\%f C:\Dev\git-scripts\%f
# 4) for %f in (post-checkout post-commit pre-commit pre-push) do mklink C:\Users\passp\.git\hooks\%f C:\Dev\git-scripts\githooks-%f

hookspath=$( git config --global core.hookspath )
if [ -z "${hookspath}" ]
then
  hookspath=${HOME}/.git/hooks/
  git config --global core.hookspath "${hookspath}"
else
  hookspath=${hookspath/#~\//${HOME}\/}
fi
if [ ! -d "${hookspath}" ]
then
  mkdir -pv "${hookspath}"
fi

for file in *
do
  if [[ "${file}" == "install" || "${file}" =~ "~" || \
    "${file}" =~ "rippled" || ! "${file}" =~ "git" ]]
  then
    # echo -e "Skipping ${file}\n"
    continue
  fi

  if [[ "${file}" =~ "githooks-" ]]
  then
    dest="${hookspath}/$( echo ${file} | sed 's/^githooks-//' )"
  else
    dest="${HOME}/bin/${file}"
  fi

  if [[ -e "${dest}" ]]
  then
    if ! cmp "${file}" "${dest}"
    then
      echo -e "\"${file}\" already found at ${dest}. Will not overwrite."
      # ls -l "${file}" "${dest}"
      echo -e "\n\n"
    fi
    continue
  fi

  ln -sv "$(pwd)/${file}" "${dest}"
  echo
done
