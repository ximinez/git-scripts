#!/bin/bash

# To install
# for dir in ../*/.git ; do echo $dir ; ln -vsf $( pwd )/githooks-post-checkout $dir/hooks/post-checkout ; done
#
# OR
#
# for dir in ../*/.git/hooks ; do \cp -v githooks-post-checkout ${dir}/post-checkout ; done
#
# OR
#
# mkdir -p ~/.git/hooks/ && ln -vsf $( pwd )/githooks-post-checkout ~/.git/hooks/post-checkout && git config --global core.hooksPath ~/.git/hooks/


# The hook is given three parameters: the ref of the previous HEAD, the
# ref of the new HEAD (which may or may not have changed), and a flag
# indicating whether the checkout was a branch checkout (changing
# branches, flag=1) or a file checkout (retrieving a file from the
# index, flag=0).


error()
{
  echo -e '*\n *\n  *\n *'
  echo -e '*\n *\n  *\n   * GPG signature not verified\n  *\n *\n*'
  echo -e ' *\n  *\n *\n*'
}

# Only do these validations on a branch checkout, which includes `git
# checkout` with no parameters. https://git-scm.com/docs/githooks
if [[ $3 -eq 1 ]]
then
  # Put the NIH folder for external projects in a common location
  if false
  then
    if [ -d $HOME/dev ]
    then
      export NIH_CACHE_ROOT=$HOME/dev/nih_c
    elif [ -d /c/dev ]
    then
      export NIH_CACHE_ROOT=/c/dev/nih_c
    else
      export NIH_CACHE_ROOT=$HOME/nih_c
    fi
    echo NIH_CACHE_ROOT: ${NIH_CACHE_ROOT}
  fi

  if [[ "${OS}" =~ "Windows" ]]
  then
    compilers=( "msvc" )
    build_types=( "" )
  else
    compilers=( "gcc" "clang" )
    build_types=( "Debug" "Release" )
  fi

  if [[ -f CMakeLists.txt ]] && \
    [[ ! ( $(pwd) =~ "nih_c" || $(pwd) =~ "build/cmake" || \
    $(pwd) =~ "_deps" ) ]]
  then
    echo -e "\n\n\n\n\nBuilding cmake in $(pwd)\n\n\n\n\n"
    for repo in . $( git config --file .gitmodules --get-regexp path | \
      cut -d\  -f2 )
    do
      if [[ ! -d ${repo} || ! -f ${repo}/CMakeLists.txt || \
        ! -f ${repo}/.gitignore || \
        $( grep -cw build ${repo}/.gitignore ) == 0 ]]
      then
        continue
      fi
      pushd ${repo}
      echo Compilers: ${compilers[@]}
      echo Build types: ${build_types[@]}
      for c in "${compilers[@]}"
        do
        for debug in "${build_types[@]}"
        do
          for unity in ON OFF
          do
            extra=()
            cxx=${c/gcc/g++}
            cxx=${cxx/clang/clang++}
            if [ -n "$( type -p ccache )" ]
            then
              extra[${#extra[@]}]="-DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
            fi
            if [ ${c} == "msvc" ]
            then
              extra[${#extra[@]}]="-G${cmake_win_gen:=Visual Studio 15 2017 Win64}"
              # extra[${#extra[@]}]="-G${cmake_win_gen:=Visual Studio 16 2019}"
              # extra[${#extra[@]}]="-Ax64"

              # extra[${#extra[@]}]="-G${cmake_win_gen:=Visual Studio 15 2017}"
              # extra[${#extra[@]}]="-Ax64"

              extra[${#extra[@]}]="-DCMAKE_GENERATOR_TOOLSET=host=x64"
            else
              extra[${#extra[@]}]="-DCMAKE_C_COMPILER=${c}"
              extra[${#extra[@]}]="-DCMAKE_CXX_COMPILER=${cxx}"
            fi
            if [ -z "${debug}"  -o "${debug}" == "unified" ]
            then
              target=${c}.${unity}
            else
              target=${c}.${debug}.${unity}
              extra[${#extra[@]}]="-DCMAKE_BUILD_TYPE=${debug}"
            fi
            if [ -n "${BOOST_ROOT}" ]
            then
              extra[${#extra[@]}]="-DBOOST_ROOT=$BOOST_ROOT"
            fi
            mkdir -pv build/cmake/${target}
            pushd build/cmake/${target}
            echo -e "\n\n\nTarget: $target"
            set -x
            # I like asserts
            cmake -Dunity=${unity} -Dassert=true -Dwerr=ON "${extra[@]}" ../../..
            set +x
            popd
          done
        done
      done
      popd
    done
    # Update any custom / non-build CMake folders
    find . \( -path '*/build/cmake' -o -path '*/.nih_c' \) -prune -false -o \
      -name CMakeCache.txt -print0 | \
      xargs -r0 -n1 -P4 cmake

    # Reformat on checkout, if the current branch has instructions
    if [[ -f .clang-format ]]
    then
      echo "$@"
      compare=$( [ "$1" = "$2" ] && echo "upstream/develop" || echo "$1" )
      echo -e "\nFormatting files changed since $compare"
      # In Windows confirm the correct path to your LLVM install. But note
      # that there are incompatibilities with the Windows version so you
      # may not want to use this hook in Windows.
      llvmpath="/c/Program Files/LLVM/bin/"
      if [ -d "${llvmpath}" ]
      then
        PATH="${llvmpath}:${PATH}"
      fi
      # find src/ripple src/test -type f \! -name 'AccountTxPaging.cpp' \( \
      #   -name '*.cpp' -o -name '*.h' -o -name '*.ipp' \) -print0 \
      #   | xargs -0 clang-format -i
      git-clang-format --extensions c,cpp,h,cxx,ipp $compare
    else
      echo -e "\nNot formatting code on older branch"
    fi
  fi

  if [ $# -gt 1 ]
  then
    git verify-commit ${2} || error
  fi

  if git branch -r | grep -q upstream/develop
  then
    git log --oneline -1 ..upstream/develop
  fi
fi
