#!/bin/bash -l

# To install
# for dir in ../*/.git ; do echo $dir ; ln -vsf $( pwd )/githooks-post-checkout $dir/hooks/post-checkout ; done
#
# OR
#
# for dir in ../*/.git/hooks ; do \cp -v githooks-post-checkout ${dir}/post-checkout ; done
#
# OR
#
# mkdir -p ~/.git/hooks/ && ln -vsf $( pwd )/githooks-post-checkout ~/.git/hooks/post-checkout && git config --global core.hooksPath ~/.git/hooks/


# The hook is given three parameters: the ref of the previous HEAD, the
# ref of the new HEAD (which may or may not have changed), and a flag
# indicating whether the checkout was a branch checkout (changing
# branches, flag=1) or a file checkout (retrieving a file from the
# index, flag=0).

set -o pipefail

error()
{
  echo -e '*\n *\n  *\n *'
  echo -e '*\n *\n  *\n   * GPG signature not verified\n  *\n *\n*'
  echo -e ' *\n  *\n *\n*'
}

_run()
{
  # Usage: _run: command
  echo -en "\nRun: ${@} " |& tee -a "${logfile}"
  date |& tee -a "${logfile}"
  ( time ${@} ) |& tee -a "${logfile}"
}

# Only do these validations on a branch checkout, which includes `git
# checkout` with no parameters. https://git-scm.com/docs/githooks
if [[ $3 -eq 1 ]]
then
  # Put the NIH folder for external projects in a common location
  if false
  then
    if [ -d $HOME/dev ]
    then
      export NIH_CACHE_ROOT=$HOME/dev/nih_c
    elif [ -d /c/dev ]
    then
      export NIH_CACHE_ROOT=/c/dev/nih_c
    else
      export NIH_CACHE_ROOT=$HOME/nih_c
    fi
    echo NIH_CACHE_ROOT: ${NIH_CACHE_ROOT}
  fi

  if [[ "${OS}" =~ "Windows" ]]
  then
    vsgen="Visual Studio 16 2019"
    # compilers=( "msvc17" "msvc19" "msvc22" )
    # vsgen="Visual Studio 17 2022"
    compilers=( "msvc19" )
    build_types=( "" )

    if false
    then
      pg='/C/Program Files/PostgreSQL'
      if [[ -d "${pg}" ]]
      then
        # Initialize the entry with the top dir, then look for
        # numbered children. Use the first one found.
        # (Don't mix versions.)
        postgres="-DPostgreSQL_ROOT=${pg}"
        for sub in "${pg}"/[0-9]*
        do
          if [[ -d "${sub}" ]]
          then
            echo "Found PostgreSQL at ${sub}"
            postgres="-DPostgreSQL_ROOT=${sub}"
            break
          fi
        done
      fi
      unset pg
    else
      postgres="-Dnopostgres=TRUE"
    fi

    for cas in '/C/Dev/cassandra'*
    do
      if [[ -d "${cas}" && -d "${cas}/lib" ]]
      then
        echo "Found cassandra at ${cas}"
        prefix="${cas}"
        break
      fi
    done
    unset cas
    [[ ! -v prefix ]] || \
      cmake_prefix_path="-DCMAKE_PREFIX_PATH=${prefix}"
  else
    compilers=( "gcc" "clang" )
    build_types=( "Debug" "Release" )
  fi

  logfile="$(pwd)/build/checkout.log"
  if [[ -f CMakeLists.txt ]] && \
    [[ ! ( $(pwd) =~ "nih_c" || $(pwd) =~ "build/cmake" || \
    $(pwd) =~ "_deps" || $(pwd) =~ ".conan" ) ]]
  then
    mkdir -pv build | tee $logfile
    echo -e "\n\n\n\n\nBuilding cmake in $(pwd)\n\n\n\n\n" | tee -a $logfile
    unset conan
    for conanfile in conanfile.*
    do
      if [[ -f "${conanfile}" ]]
      then
        conan=1
        for exp in external/*/conanfile.*
        do
          if [[ -f "${exp}" ]]
          then
            exp=$( dirname "${exp}" )
            name=$( basename "${exp}" )
            extra=$( grep "${name}/" "${conanfile}" | \
              sed "s/.*'${name}\/\(.*\)'.*/\1@/" | head -1 )
            search="${name}/${extra}"
            cmd=( conan search "${search}" )
            echo "Run: ${cmd[@]}" |& tee -a $logfile
            if "${cmd[@]}" |& tee -a $logfile
            then
              echo "Run: ${search} already exported" |& tee -a $logfile
              continue
            fi
            cmd=( conan export "${exp}" "${extra}" )
            echo "Run: ${cmd[@]}" |& tee -a $logfile
            "${cmd[@]}" |& tee -a $logfile
          fi
        done

        conan_profile_list=$( conan profile list )
      fi
    done
    for repo in . $( git config --file .gitmodules --get-regexp path | \
      cut -d\  -f2 )
    do
      if [[ ! -d ${repo} || ! -f ${repo}/CMakeLists.txt || \
        ( -e ${repo}/build && ! -d ${repo}/build ) ]]
      then
        echo "Not running cmake in ${repo}" | tee -a $logfile >&2
        continue
      fi
      pushd ${repo} > >( tee -a $logfile )
      echo Compilers: ${compilers[@]} | tee -a $logfile
      echo Build types: ${build_types[@]} | tee -a $logfile
      conan_profiles=()
      for c in "${compilers[@]}"
      do
        for debug in "${build_types[@]}"
        do
          buildparam=()
          if [[ -v conan ]]
          then
            tooldir="conan"
            for search in "${c}${debug}" "${c}Release" "${c}"
            do
              if echo "${conan_profile_list}" | grep -qwx "${search}"
              then
                tooldir+=".${search}"
                break
              fi
            done
            if [[ -z "${debug}" ]]
            then
              conan_types=( Release Debug )
            else
              conan_types=( ${debug:-Release} )
            fi
            for conanbuild in "${conan_types[@]}"
            do
              profile=()
              unset tracker
              for search in "${c}${conanbuild}" "${c}Release" "${c}" "default"
              do
                if echo "${conan_profile_list}" | grep -qwx "${search}"
                then
                  tracker="${tooldir}${conanbuild}${search}"
                  profile+=( -pr "${search}" )
                  break
                fi
              done
              if [[ "${tracker}" == "" ]] || \
                ! printf '%s\0' "${conan_profiles[@]}" \
                  | grep -F -x -z -q -- "${tracker}"
              then
                pushd build > >( tee -a $logfile )
                toolchainfile=$( find "${tooldir}" -iname "conan_toolchain.cmake" )
                if [[ -f "${toolchainfile}" ]]
                then
                  echo "Run: Toolchain file is ${toolchainfile}" | tee -a $logfile
                  echo "Run: Skipping conan install. Toolchain file exists. ${toolchainfile}" \
                    | tee -a $logfile
                  echo "  If dependencies change, wipe build folder and start over." \
                    | tee -a $logfile
                else
                  _run mkdir -pv "${tooldir}"
                  pushd "${tooldir}" > >( tee -a $logfile )
                  cmd=( conan install ../..
                    --output-folder .
                    --build missing
                    -s build_type="${conanbuild}"
                    "${profile[@]}" )
                  echo "Run: ${cmd[@]}" |& tee -a $logfile
                  "${cmd[@]}" |& tee -a $logfile |& \
                      awk '{printf "."}'
                  echo | tee -a $logfile
                  if [[ "${tracker}" != "" ]]
                  then
                    conan_profiles+=( "${tracker}" )
                  fi
                  popd > >( tee -a $logfile )
                  toolchainfile=$( find "${tooldir}" -iname "conan_toolchain.cmake" )
                  echo "Run: Toolchain file is ${toolchainfile}" | tee -a $logfile
                fi
                popd > >( tee -a $logfile )
                if [[ ! -f "build/${toolchainfile}" ]]
                then
                  echo "Run: Conan did not make a toolchain file" | tee -a $logfile
                  break
                fi
              fi
            done
            buildparam+=( "-DCMAKE_TOOLCHAIN_FILE=../../${toolchainfile}" )
            buildparam+=( "-DCMAKE_POLICY_DEFAULT_CMP0091=NEW" )
          fi
          if [ ${c} == "msvc22" ]
          then
            buildparam+=( "-G${cmake_win_gen:=${vsgen}}" )
            buildparam+=( "-Ax64" )

            buildparam+=( "-DCMAKE_GENERATOR_TOOLSET=host=x64" )
          elif [ ${c} == "msvc19" ]
          then
            buildparam+=( "-G${cmake_win_gen:=${vsgen}}" )
            buildparam+=( "-Ax64" )

            if [[ "${vsgen}" == "Visual Studio 17 2022" ]]
            then
              buildparam+=( "-DCMAKE_GENERATOR_TOOLSET=v142,host=x64" )
            else
              buildparam+=( "-DCMAKE_GENERATOR_TOOLSET=host=x64" )
            fi
          elif [ ${c} == "msvc17" ]
          then
            buildparam+=( "-G${cmake_win_gen:=${vsgen}}" )
            buildparam+=( "-Ax64" )

            buildparam+=( "-DCMAKE_GENERATOR_TOOLSET=v141,host=x64" )
          elif [ ${c} == "msvc" ]
          then
            buildparam+=( "-G${cmake_win_gen:=${vsgen}}" )
            buildparam+=( "-Ax64" )

            buildparam+=( "-DCMAKE_GENERATOR_TOOLSET=host=x64" )
          else
            cxx=${c/gcc/g++}
            cxx=${cxx/clang/clang++}
            buildparam+=( "-DCMAKE_C_COMPILER=${c}" )
            buildparam+=( "-DCMAKE_CXX_COMPILER=${cxx}" )
          fi
          for unity in ON OFF
          do
            # echo "c: $c, debug: $debug, unity: $unity" | tee -a $logfile
            extra=( "${buildparam[@]}" )
            if [ -n "$( type -p ccache )" ]
            then
              extra+=( "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache" )
            fi
            [[ ! -v postgres ]] || \
              extra+=( "${postgres}" )
            [[ ! -v cmake_prefix_path ]] || \
              extra+=( "${cmake_prefix_path}" )
            if [ -z "${debug}"  -o "${debug}" == "unified" ]
            then
              target=${c}.${unity}
            else
              target=${c}.${debug}.${unity}
              extra+=( "-DCMAKE_BUILD_TYPE=${debug}" )
            fi
            if [ -n "${BOOST_ROOT}" ]
            then
              extra+=( "-DBOOST_ROOT=$BOOST_ROOT" )
            fi
            if [ -n "${OPENSSL_ROOT}" ]
            then
              extra+=( "-DOPENSSL_ROOT=$OPENSSL_ROOT" )
            fi
            if [[ -f "build/cmake/${target}/CMakeCache.txt" ]]
            then
              echo "Run: Skipping cmake call in ${target}" | tee -a $logfile
              echo "  CMakeCache.txt file exists" | tee -a $logfile
              continue
            fi
            mkdir -pv build/cmake/${target} | tee -a $logfile
            pushd build/cmake/${target} > >( tee -a $logfile )
            echo -e "\n\n\nTarget: $target" | tee -a $logfile
            set -x
            pwd | tee -a $logfile

            extra+=( "-Dunity=${unity}" )
            # I like asserts
            extra+=( "-Dassert=true" )
            extra+=( "-Dwerr=ON" )
            extra+=( "../../.." )
            cmd=( cmake "${extra[@]}" )
            echo "Run: ${cmd[@]}" |& tee -a $logfile
            "${cmd[@]}" |& tee -a $logfile |& awk '{printf "."}'
            echo | tee -a $logfile
            set +x
            popd > >( tee -a $logfile )
          done
        done
      done

      preset="${repo}/CMakeUserPresets.json"
      if [[ -v conan && -f "${preset}" ]] &&
        grep -q "${tooldir}..\?build/generators..\?CMakePresets.json" "${preset}" &&
        [[ $( wc -l "${preset}" | cut -d\  -f1 ) -eq 8 ]]
      then
        _run mv -vf "${preset}" "${preset}.bad"
      fi

      popd > >( tee -a $logfile )
    done

    if false
    then
      # Update any custom / non-build CMake folders
      cmd=( find . \( -path '*/build/cmake' -o -path '*/.nih_c' \) -prune
        -false -o -name CMakeCache.txt -fprintf /dev/stderr
        "Building cmake in %p\n" -print0 )
      echo "Run: ${cmd[@]}" | tee -a ${logfile}
      "${cmd[@]}" 2> >( tee -a ${logfile} 1>&2 ) | \
        xargs -r0 -n1 -P4 cmake |& tee -a $logfile |& awk '{printf "."}' && echo
    fi

    # Reformat on checkout, if the current branch has instructions
    g=$( git rev-parse --git-dir )
    b=$( git rev-parse --abbrev-ref HEAD )
    if [[ -f .clang-format ]] && type -t git-clang-format >& /dev/null \
      && [[ ! -f "diff.${b}" && ! -f "${g}/MERGE_HEAD"
        && ! -d "${g}/rebase-merge" && ! -d "${g}/rebase-apply" ]]
    then
      echo "$@"
      if git branch -r | grep -q "upstream/develop"
      then
        branches=( "$2" "upstream/develop" )
      else
        branches=( "$1" "$2" )
      fi
      compare=$( git merge-base --octopus "${branches[@]}" )
      echo -e "\nFormatting files changed since $compare"
      # In Windows confirm the correct path to your LLVM install. But note
      # that there are incompatibilities with the Windows version so you
      # may not want to use this hook in Windows.
      llvmpath="/c/Program Files/LLVM/bin/"
      if [ -d "${llvmpath}" ]
      then
        PATH="${llvmpath}:${PATH}"
      fi
      # find src/ripple src/test -type f \! -name 'AccountTxPaging.cpp' \( \
      #   -name '*.cpp' -o -name '*.h' -o -name '*.ipp' \) -print0 \
      #   | xargs -0 clang-format -i
      git-clang-format --extensions c,cpp,h,cxx,ipp $compare
    else
      echo -e "\nNot formatting code"
    fi
  fi

  if [ $# -gt 1 ]
  then
    git verify-commit ${2} || error
  fi

  if git branch -r | grep -q upstream/develop
  then
    git log --oneline -1 ..upstream/develop
  fi

  b="$(git symbolic-ref HEAD 2>/dev/null)"
  b=${b##refs/heads/};
  if [[ "$b" != "" ]]
  then
    echo -e "\nGit branch ready: $b\n"
  fi
fi
