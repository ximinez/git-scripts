#!/bin/bash

# To install
# for dir in ../*/.git ; do echo $dir ; ln -vsf $( pwd )/githooks-post-checkout $dir/hooks/post-checkout ; done
#
# OR
#
# for dir in ../*/.git/hooks ; do \cp -v githooks-post-checkout ${dir}/post-checkout ; done
#
# OR
#
# mkdir -p ~/.git/hooks/ && ln -vsf $( pwd )/githooks-post-checkout ~/.git/hooks/post-checkout && git config --global core.hooksPath ~/.git/hooks/


# The hook is given three parameters: the ref of the previous HEAD, the
# ref of the new HEAD (which may or may not have changed), and a flag
# indicating whether the checkout was a branch checkout (changing
# branches, flag=1) or a file checkout (retrieving a file from the
# index, flag=0).


error()
{
  echo -e '*\n *\n  *\n *'
  echo -e '*\n *\n  *\n   * GPG signature not verified\n  *\n *\n*'
  echo -e ' *\n  *\n *\n*'
}

# Only do these validations on a branch checkout, which includes `git
# checkout` with no parameters. https://git-scm.com/docs/githooks
if [[ $3 -eq 1 ]]
then
  # Put the NIH folder for external projects in a common location
  if false
  then
    if [ -d $HOME/dev ]
    then
      export NIH_CACHE_ROOT=$HOME/dev/nih_c
    elif [ -d /c/dev ]
    then
      export NIH_CACHE_ROOT=/c/dev/nih_c
    else
      export NIH_CACHE_ROOT=$HOME/nih_c
    fi
    echo NIH_CACHE_ROOT: ${NIH_CACHE_ROOT}
  fi

  if [[ "${OS}" =~ "Windows" ]]
  then
    vsgen="Visual Studio 16 2019"
    compilers=( "msvc2019" )
    VS2022="/c/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin"
    if [[ -e "${VS2022}/cmake.exe" ]]
    then
      export PATH="${VS2022}:${PATH}"
      vsgen="Visual Studio 17 2022"
      compilers=( "msvc2022" )
    fi
    # compilers=( "msvc2017" "msvc2019" "msvc2022" )
    build_types=( "" )

    if false
    then
      pg='/C/Program Files/PostgreSQL'
      if [[ -d "${pg}" ]]
      then
        # Initialize the entry with the top dir, then look for
        # numbered children. Use the first one found.
        # (Don't mix versions.)
        postgres="-DPostgreSQL_ROOT=${pg}"
        for sub in "${pg}"/[0-9]*
        do
          if [[ -d "${sub}" ]]
          then
            echo "Found PostgreSQL at ${sub}"
            postgres="-DPostgreSQL_ROOT=${sub}"
            break
          fi
        done
      fi
      unset pg
    else
      postgres="-Dnopostgres=TRUE"
    fi

    for cas in '/C/Dev/cassandra'*
    do
      if [[ -d "${cas}" && -d "${cas}/lib" ]]
      then
        echo "Found cassandra at ${cas}"
        prefix="${cas}"
        break
      fi
    done
    unset cas
    [[ ! -v prefix ]] || \
      cmake_prefix_path="-DCMAKE_PREFIX_PATH=${prefix}"
  else
    compilers=( "gcc" "clang" )
    build_types=( "Debug" "Release" )
  fi

  logfile="$(pwd)/build/checkout.log"
  if [[ -f CMakeLists.txt ]] && \
    [[ ! ( $(pwd) =~ "nih_c" || $(pwd) =~ "build/cmake" || \
    $(pwd) =~ "_deps" ) ]]
  then
    if [[ -e conanfile.py ]]
    then
      conan export external/rocksdb |& tee -a $logfile
      conan=1
    fi
    mkdir -pv build
    echo -e "\n\n\n\n\nBuilding cmake in $(pwd)\n\n\n\n\n" | tee $logfile
    for repo in . $( git config --file .gitmodules --get-regexp path | \
      cut -d\  -f2 )
    do
      if [[ ! -d ${repo} || ! -f ${repo}/CMakeLists.txt || \
        ( -e ${repo}/build && ! -d ${repo}/build ) ]]
      then
        echo "Not running cmake in ${repo}" | tee -a $logfile >&2
        continue
      fi
      pushd ${repo} > >( tee -a $logfile )
      echo Compilers: ${compilers[@]} | tee -a $logfile
      echo Build types: ${build_types[@]} | tee -a $logfile
      for c in "${compilers[@]}"
        do
        for debug in "${build_types[@]}"
        do
          for unity in ON OFF
          do
            # echo "c: $c, debug: $debug, unity: $unity" | tee -a $logfile
            extra=()
            cxx=${c/gcc/g++}
            cxx=${cxx/clang/clang++}
            if [ -n "$( type -p ccache )" ]
            then
              extra+=( "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache" )
            fi
            [[ ! -v postgres ]] || \
              extra+=( "${postgres}" )
            [[ ! -v cmake_prefix_path ]] || \
              extra+=( "${cmake_prefix_path}" )
            if [ -z "${debug}"  -o "${debug}" == "unified" ]
            then
              target=${c}.${unity}
            else
              target=${c}.${debug}.${unity}
              extra+=( "-DCMAKE_BUILD_TYPE=${debug}" )
            fi
            if [ -n "${BOOST_ROOT}" ]
            then
              extra+=( "-DBOOST_ROOT=$BOOST_ROOT" )
            fi
            mkdir -pv build/cmake/${target} | tee -a $logfile
            pushd build/cmake/${target} > >( tee -a $logfile )
            echo -e "\n\n\nTarget: $target" | tee -a $logfile
            set -x
            pwd | tee -a $logfile
            if [[ -v conan ]]
            then
              if [ -z "${debug}"  -o "${debug}" == "unified" ]
              then
                for conandebug in Release Debug
                do
                  conan install ../../.. --build missing \
                    -s build_type=${conandebug} |& tee -a $logfile |& \
                      awk '{printf "."}'
                  echo | tee -a $logfile
                done
              else
                conan install ../../.. --build missing \
                  -s build_type=${debug} |& tee -a $logfile |& \
                    awk '{printf "."}'
                echo | tee -a $logfile
              fi
              extra+=( "-DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake" )
            else
              if [ ${c} == "msvc2022" ]
              then
                extra+=( "-G${cmake_win_gen:=Visual Studio 17 2022}" )
                extra+=( "-Ax64" )

                extra+=( "-DCMAKE_GENERATOR_TOOLSET=host=x64" )
              elif [ ${c} == "msvc2019" ]
              then
                extra+=( "-G${cmake_win_gen:=${vsgen}}" )
                extra+=( "-Ax64" )

                extra+=( "-DCMAKE_GENERATOR_TOOLSET=v142,host=x64" )
              elif [ ${c} == "msvc2017" ]
              then
                extra+=( "-G${cmake_win_gen:=${vsgen}}" )
                extra+=( "-Ax64" )

                extra+=( "-DCMAKE_GENERATOR_TOOLSET=v141,host=x64" )
              elif [ ${c} == "msvc" ]
              then
                extra+=( "-G${cmake_win_gen:=${vsgen}}" )
                extra+=( "-Ax64" )

                extra+=( "-DCMAKE_GENERATOR_TOOLSET=host=x64" )
              else
                extra+=( "-DCMAKE_C_COMPILER=${c}" )
                extra+=( "-DCMAKE_CXX_COMPILER=${cxx}" )
              fi
            fi
            extra+=( "-Dunity=${unity}" )
            # I like asserts
            extra+=( "-Dassert=true" )
            extra+=( "-Dwerr=ON" )
            extra+=( "../../.." )
            echo "\$ cmake ${extra[@]}" |& tee -a $logfile
            cmake "${extra[@]}" |& tee -a $logfile |& awk '{printf "."}'
            echo | tee -a $logfile
            set +x
            popd > >( tee -a $logfile )
          done
        done
      done
      popd > >( tee -a $logfile )
    done
    # Update any custom / non-build CMake folders
    find . \( -path '*/build/cmake' -o -path '*/.nih_c' \) -prune -false -o \
      -name CMakeCache.txt -fprintf /dev/stderr "Building cmake in %p\n" \
      -print0 2> >( tee -a ${logfile} 1>&2 ) | \
      xargs -r0 -n1 -P4 cmake |& tee -a $logfile |& awk '{printf "."}' && echo

    # Reformat on checkout, if the current branch has instructions
    if [[ -f .clang-format ]]
    then
      echo "$@"
      if git branch -r | grep -q upstream/develop
      then
        compare=$( [ "$1" = "$2" ] && echo "upstream/develop" || echo "$1" )
      else
        compare="$1"
      fi
      echo -e "\nFormatting files changed since $compare"
      # In Windows confirm the correct path to your LLVM install. But note
      # that there are incompatibilities with the Windows version so you
      # may not want to use this hook in Windows.
      llvmpath="/c/Program Files/LLVM/bin/"
      if [ -d "${llvmpath}" ]
      then
        PATH="${llvmpath}:${PATH}"
      fi
      # find src/ripple src/test -type f \! -name 'AccountTxPaging.cpp' \( \
      #   -name '*.cpp' -o -name '*.h' -o -name '*.ipp' \) -print0 \
      #   | xargs -0 clang-format -i
      git-clang-format --extensions c,cpp,h,cxx,ipp $compare
    else
      echo -e "\nNot formatting code on older branch"
    fi
  fi

  if [ $# -gt 1 ]
  then
    git verify-commit ${2} || error
  fi

  if git branch -r | grep -q upstream/develop
  then
    git log --oneline -1 ..upstream/develop
  fi

  b="$(git symbolic-ref HEAD 2>/dev/null)"
  b=${b##refs/heads/};
  if [[ "$b" != "" ]]
  then
    echo -e "\nGit branch ready: $b\n"
  fi
fi
