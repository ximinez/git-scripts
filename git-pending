#!/bin/bash

# Searching for .git without checking type handles git worktrees.
# TODO: Make the ignore list a param, but for now this works.

if [[ $1 == "--remote" ]]
then
  shift
  [[ $# == 1 ]] || exit 1
  tmp=$1
  shift
  # If in a valid git dir, succeeds, so continue
  # If in an invalid git dir, fails, so exit with success
  git status -s -b >& "${tmp}" || exit 0
  # If grep finds matches, succeeds, so exit with a failure.
  # If no matches, succeeds, fails, so continue
  grep -q -e '\[ahead' -e '\[behind' "${tmp}" && exit 1
  # If there are no diffs, succeeds, so continue.
  # If there are diffs, fails, so exit with a failure.
  git diff --quiet >& /dev/null || exit 1
  # If there are no problems, succeeds, so continue.
  # If there are problems, fails, so exit with a failure.
  git diff --check >& /dev/null || exit 1
  exit 0
fi

if [[ $1 == "-v" ]]
then
  verbose=1
  shift
fi

tmp=$(mktemp)

search=( "$@" )
depth=()
remote=( -execdir $0 --remote "${tmp}" \; -o )
print=( -printf "%h\n" )
status=( -execdir git status -s -b \; )
if [[ $1 == "--current" ]]
then
  search=( "." )
  depth=( -maxdepth 1 )
  remote=()
  print=( -printf "\n" )
  status=( -execdir git status -s -b --untracked-files=no \; )
  shift
fi

find "${search[@]}" \
  "${depth[@]}" \
  -iname .nih_c -prune -o \
  -iname nih_c -prune -o \
  -iname _deps -prune -o \
  -iname .git \
  -execdir git rev-parse \; \
  \( \
    "${remote[@]}" \
    "${print[@]}" \
    "${status[@]}" \
    -execdir git diff --check \; \
    -printf "\n" \
  \) \
  -prune

rm -f "${tmp}"
if [[ -n "${verbose}" ]]
then
  echo Done
fi
