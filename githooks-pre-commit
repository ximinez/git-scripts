#!/bin/bash

if [[ -f .clang-format ]] && type -t git-clang-format >& /dev/null \
  && [[ ! -f "diff.$(git rev-parse --abbrev-ref HEAD)" ]]
then
  g=$( git rev-parse --absolute-git-dir )
  b=$( git rev-parse --abbrev-ref HEAD )
  # If we're not in the middle of a merge, check the index only.
  if [[ ! -f ${g}/MERGE_HEAD && ! -d "${g}/rebase-merge" \
    && ! -d "${g}/rebase-apply" ]] && ! git diff --exit-code --quiet
  then
    stash=true
    git stash push --keep-index --quiet

    # Format the files
    git-clang-format --extensions c,cpp,h,cxx,ipp

    # Only uncomment the following line if you want to aggressively ensure
    # that all formatting across the project is correct, and your version
    # of `clang-format` doesn't have any incompatibilities.
    # find src/ripple src/test -type f \( -name '*.cpp' -o -name '*.h' -o -name '*.ipp' \) -print0 | xargs -0 clang-format -i

    # Abort the commit if the format is bad.
    # Pass `--no-verify` to `git commit` to skip this check.
    # Comment the following line if you want to let the commit complete even if
    # there are formatting problems.
    git diff --exit-code
    code=$?
    # If we're not in the middle of a merge, restore any unstaged changes
    # that were stashed.
    if [[ ! -f ${g}/MERGE_HEAD && "${stash}" == "true" ]]
    then
      git restore --quiet -- .
      git stash pop --quiet
    fi
    exit $code
  fi
fi
