# Include this in your main ~/.gitconfig file by adding
# [include]
#   path = <path to this file>
# If you run the `install` script, and it works, the path to this file
# will be ~/.gitconfig-aliases

[alias]
  unstage = reset HEAD --
  undo = checkout --
  rollback = checkout --
  alias = "!_() { [ \"$#\" -eq 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1; }; _"
  aliases = "!git config --get-regexp \"alias.*\" | sed \"s/[ ]/ = /\""
  where = "!_() { git config --get \"alias.${1}\"; }; _"
  safecommit = commit --verbose
  fixup = safecommit --fixup=HEAD
  f = fetch
  sc = safecommit
  vmerge = merge --edit --log --verbose
  addall = add --verbose --patch --update
  aa = addall
  adddiff = "!_() { git add ${@} && while test $# -gt 0 -a ! -f \"$1\" ; do shift; done && git diff --staged ${@}; }; _"
  addiff = "!_() { git add ${@} && while test $# -gt 0 -a ! -f \"$1\" ; do shift; done && git diff --staged ${@}; }; _"
  yolo = "!_() { git commit --no-verify -m \"[WIP] YOLO!\" . && git push --no-verify; }; _"
  checkpoint = "!_() { git commit -m \"[WIP] Checkpoint\" --no-verify . && git signpush --no-verify; }; _"
  log-files = log --name-status
  logol = log --format='%C(auto)%h %G?%d %s' --first-parent
  log-10 = log10
  log10 = logol -10
  needrebase = logol ..upstream/develop
  sincerebase = logol upstream/develop..
  undelete = checkout HEAD
  log-sig = log --show-signature
  ld = logdiff
  lf = log-files
  pushf = push --force-with-lease --force-if-includes
  subdiff = "!git diff && git submodule foreach 'git diff'"
  subpush = push --recurse-submodules=on-demand
  subupdate = submodule update --remote --merge
  sign = commit --amend --no-edit -p -S
  sp = signpush
  retcon = rebase --interactive --autosquash --rebase-merges
  substatus = submodule status
  hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
  stashpull = "!_() { git diff --summary --exit-code && ( git pull ; exit ) || ( git stash --keep-index && git pull && git stash pop ); }; _"
  mergepull = "!_() { git fetch && remote=$( git rev-parse --abbrev-ref --symbolic-full-name \"@{u}\" 2>/dev/null ) && git rebase --rebase-merges \"${remote}\" \"${@}\"; }; _"
  checkoutbranch = checkout --track
  cob = checkoutbranch
  cb = checkout -b
  fork = checkout --no-track -b
  committers = shortlog -ns
  graphall = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset'
  graph = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset'
  head-branch = "!_() { git remote show \"$1\" | awk '/HEAD branch/ {print $NF}'; }; _"
  squash = "!_() { [ \"$#\" -ge 1 -a \"$#\" -le 2 ] && git checkout \"$1\" && git diff --exit-code && git pull && base=${2:-$( echo \"upstream/$(git head-branch upstream)\")} && parts=( $( echo \"$base\" | sed \"s/[/:]/\\n/\" ) ) && git fetch \"${parts[0]}\" && git merge --edit --log --verbose \"$base\" && git reset --hard \"$base\" && git merge --squash origin/\"$1\" && git diff --summary --exit-code origin/\"$1\" && git commit --verbose && git push --force-with-lease --no-verify || echo \"usage: git squash <branch> [<base branch>]\" >&2 && exit 1; }; _"
	lines-changed = diff --compact-summary  upstream/develop
  diffr = diff @{upstream}
  dr = d @{upstream}
  dcr = dc @{upstream}
  resetr = reset @{upstream}
  mc = merge --continue
  addconflicts = !git conflictmarkers || git adddiff $( git conflicts )
  addc = addconflicts
  conflictmarkers = !grep -rl '<<<<<' $( git ls-files )

  # Stolen from https://github.com/thejohnfreeman/dotfiles/blob/ubuntu/.gitconfig
  au = add --update .
  b = branch
  ba = branch --all
  c = commit
  ca = commit --amend
  cat = cat-file -p
  cm = commit --message
  co = checkout
  conflicts = !git ls-files -u | cut -f 2 | sort -u
  cum = commit --only . --message
  d = diff --stat
  dc = diff --cached
  l = log --graph --topo-order --pretty='%C(auto)%h%d %s %Cgreen(%ar)%Creset' -10
  ls = ls-files
  pending = "!f() { local r=$1; shift; git diff $(git merge-base HEAD $r) $@; }; f"
  rc = rebase --continue
  s = status --short
  exec = "!exec "
